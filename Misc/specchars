#!/usr/bin/env bash

variable=abc
case "$variable" in
  abc)  echo "\$variable = abc" ;;
  xyz)  echo "\$variable = xyz" ;;
esac

var=xyz
case "$var" in
  abc)  echo "\$var = abc" ;;&
  xyz)  echo "\$var = xyz" ;&
esac

# comma operator
# Set "a = 9" and "t2 = 15 / 3"
let "t2 = ((a = 9, 15 / 3))"
echo $a
echo $t2

for file in {$PREFIX/,$PREFIX/usr/}bin/*calc
#             ^    Find all executable files ending in "calc"
#+                 in $PREFIX/bin and $PREFIX/usr/bin directories.
do
  if [ -x "$file" ]
  then
    echo $file
  fi
done

var=veryMixedUpVariable
# veryMixedUpVariable
echo ${var}            
#         *              First char --> uppercase.
# VeryMixedUpVariable
echo ${var^}           
#         **             All chars  --> uppercase.
# VERYMIXEDUPVARIABLE
echo ${var^^}          
#         *              First char --> lowercase.
# veryMixedUpVariable
echo ${var,}           
# verymixedupvariable
#         **             All chars  --> lowercase.
echo ${var,,} 

# command is itself a Bash builtin, and its exit status is true (0).

:
echo $?   # 0

# Endless loop:

while :
do
  sleep 1
  break
done

# Same as:
#    while true
#    do
#      :
#    done
# Placeholder in if/then test:

if :
then :   
  # Do nothing and branch ahead
  echo true
else     
  # Or else ...
  # take-some-action
  :
fi

: ${username=`whoami`}
# ${username=`whoami`}   Gives an error without the leading :
#                        unless "username" is a command or builtin...

# From "usage-message.sh example script.
: ${1?"Usage: $0 ARGUMENT"}   

: ${HOSTNAME?} ${UID?}
#: ${HOSTNAME?} ${USER?} ${MAIL?}
#  Prints error message
#+ if one or more of essential environmental variables not set

ls | wc -l > data.xxx
cat data.xxx  
# File "data.xxx" now empty.	      
: > data.xxx   
cat data.xxx  

# Same effect as   cat /dev/null >data.xxx
# However, this does not fork a new process, since ":" is a builtin.

ls | wc -l > data.xxx
cat data.xxx  
# File "data.xxx" now empty.	      
: >> data.xxx   
cat data.xxx  

# Same effect as   cat /dev/null >> data.xxx
# However, this does not fork a new process, since ":" is a builtin.
: This is a comment that generates no error
# A colon is acceptable as a function name.
:()
{
  echo "The name of this function is "$FUNCNAME" "
  # Why use a colon as a function name?
  # It's a way of obfuscating your code.
}
:

_()
{
  echo "The name of this function is "$FUNCNAME" "
  # Why use a colon as a function name?
  # It's a way of obfuscating your code.
}
_

# Contains a : (null command), and so is not empty.
not_empty ()
{
  :
}
echo *

var1=100
(( var0 = var1<98?9:21 ))
#                ^ ^
echo $var0
var1=97
(( var0 = var1<98?9:21 ))
echo $var0
# if [ "$var1" -lt 98 ]
# then
#   var0=9
# else
#   var0=21
# fi

your_id=${UID}-on-${HOSTNAME}
#your_id=${USER}-on-${HOSTNAME}
echo "$your_id"
echo "Old \$PATH = $PATH"
# Add /opt/bin to $PATH for duration of script.
PATH=${PATH}:/opt/bin  
echo "New \$PATH = $PATH"

var1=1
var2=2
var4=
# var3 is unset.

# 1
echo ${var1-$var2}   
# 2
echo ${var3-$var2} 
# null
echo ${var4-$var2}   
# 2
echo ${var4:-$var2}   
#          ^          Note the $ prefix.

# Echoes the result of `whoami`, if variable $username is still unset.
echo ${username-`whoami`}
