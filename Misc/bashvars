#!/usr/bin/env bash

echo 'Path to bash'
echo $BASH

echo 'BASH ENVIRONMENT'
echo $BASH_ENV

echo 'BASH SUBSHELL'
echo $BASH_SUBSHELL

echo 'BASH PID'
echo $BASHPID
echo $$

echo 'BASH PROCESS LISTING'
ps ax | grep bash

echo 'BASH SUBSHELL'

echo "\$\$ outside of subshell = $$"                              # 9602
echo "\$BASH_SUBSHELL  outside of subshell = $BASH_SUBSHELL"      # 0
echo "\$BASHPID outside of subshell = $BASHPID"                   # 9602

echo

( echo "\$\$ inside of subshell = $$"                             # 9602
  echo "\$BASH_SUBSHELL inside of subshell = $BASH_SUBSHELL"      # 1
  echo "\$BASHPID inside of subshell = $BASHPID" )                # 9603
  # Note that $$ returns PID of parent process.

echo 'BASH VERSION INFO:'

for n in 0 1 2 3 4 5
do
  echo "BASH_VERSINFO[$n] = ${BASH_VERSINFO[$n]}"
done  

echo 'BASH VERSION:'

echo "BASH VERSION = $BASH_VERSION"

echo 'CDPATH'

echo $CDPATH

echo 'DIRSTACK'

echo $DIRSTACK

echo 'EDITOR'

echo $EDITOR

echo 'EUID'

echo $EUID

echo 'FUNCNAME'
xyz23 ()
{
  echo "$FUNCNAME now executing."  # xyz23 now executing.
}

xyz23

echo 'GLOBIGNORE'

echo $GLOBIGNORE

echo 'GROUPS'

echo $GROUPS

declare -i cnt=0
for grp in $(groups)
do
  echo "for group $grp group id = ${GROUPS[$cnt]}"
  cnt=cnt+1
done

echo 'HOSTNAME'

echo $HOSTNAME

echo 'HOSTTYPE'

echo $HOSTTYPE
echo 'MACHTYPE'

echo $MACHTYPE
echo 'HOME'

echo $HOME

echo 'IFS'
echo "$IFS" | cat -vte
bash -c 'set w x y z; IFS=":-;"; echo "$*"'

var1="a+b+c"
var2="d-e-f"
var3="g,h,i"

IFS=+
# The plus sign will be interpreted as a separator.
echo $var1     # a b c
echo $var2     # d-e-f
echo $var3     # g,h,i

echo

IFS="-"
# The plus sign reverts to default interpretation.
# The minus sign will be interpreted as a separator.
echo $var1     # a+b+c
echo $var2     # d e f
echo $var3     # g,h,i

echo

IFS=","
# The comma will be interpreted as a separator.
# The minus sign reverts to default interpretation.
echo $var1     # a+b+c
echo $var2     # d-e-f
echo $var3     # g h i

echo

IFS=" "
# The space character will be interpreted as a separator.
# The comma reverts to default interpretation.
echo $var1     # a+b+c
echo $var2     # d-e-f
echo $var3     # g,h,i

# ======================================================== #

# However ...
# $IFS treats whitespace differently than other characters.

output_args_one_per_line()
{
  for arg
  do
    echo "[$arg]"
  done #  ^    ^   Embed within brackets, for your viewing pleasure.
}

echo; echo "IFS=\" \""
echo "-------"

IFS=" "
var=" a  b c   "
#    ^ ^^   ^^^
output_args_one_per_line $var  # output_args_one_per_line `echo " a  b c   "`
# [a]
# [b]
# [c]


echo; echo "IFS=:"
echo "-----"

IFS=:
var=":a::b:c:::"               # Same pattern as above,
#    ^ ^^   ^^^                #+ but substituting ":" for " "  ...
output_args_one_per_line $var
# []
# [a]
# []
# [b]
# [c]
# []
# []

# Note "empty" brackets.
# The same thing happens with the "FS" field separator in awk.

echo

echo 'IGNOREEOF'

echo $IGNOREEOF

echo 'LC_COLLATE'

echo $LC_COLLATE

echo 'LC_CTYPE'

echo $LC_CTYPE

echo 'LINENO'

echo $LINENO

echo 'OLDPWD'

echo $OLDPWD

echo 'OSTYPE'

echo $OSTYPE

echo 'PATH'

echo $PATH

echo 'PIPESTATUS'

echo $PIPESTATUS

ls -al | bogus_command &> /dev/null
echo ${PIPESTATUS[0]}
echo ${PIPESTATUS[1]}

echo 'PPID'

echo "$PPID"

echo 'PS1'

echo "$PS1"

echo 'PS2'

echo "$PS2"

echo 'PS3'

echo "$PS3"

echo 'PS4'

echo "$PS4"

echo 'PWD'

echo "$PWD"

# REPLY is the default value for a 'read' command.
TMOUT=1    # Prompt times out at three seconds.

echo
echo -n "What is your favorite vegetable? "
read

echo "Your favorite vegetable is $REPLY."
#  REPLY holds the value of last "read" if and only if
#+ no variable supplied.

echo
echo -n "What is your favorite fruit? "
read fruit
echo "Your favorite fruit is $fruit."
echo "but..."
echo "Value of \$REPLY is still $REPLY."
#  $REPLY is still set to its previous value because
#+ the variable $fruit absorbed the new "read" value.

echo

echo 'SECONDS'

echo "$SECONDS"

echo 'SHELLOPTS'

echo "$SHELLOPTS"

echo 'SHLVL'

echo "$SHLVL"

echo 'BASH_SUBSHELL'

echo "$BASH_SUBSHELL"

TMOUT=10    # Prompt times out at three seconds.

echo "What is your favorite song?"
echo "Quickly now, you only have $TMOUT seconds to answer!"
read song

if [ -z "$song" ]
then
  song="(no answer)"
  # Default response.
fi

echo "Your favorite song is $song."

